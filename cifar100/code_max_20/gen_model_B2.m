function net = gen_model_B2(output_nodes)

lr = [1 0] ;

% Define network
net.layers = {} ;

% Block 1

net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.05*randn(5,5,3,32, 'single'), []}}, ...
                           'learningRate', lr, ...
                           'stride', [1 1], ...
                           'pad', 2) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                            'weights', {{ones(32, 1, 'single'), zeros(32, 1, 'single')}}, ...
                            'learningRate', [1 1 0.5], ...
                            'weightDecay', [0 0]) ;
net.layers{end+1} = struct('type', 'relu') ;

net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', [2 2], ...
                           'pad', 0) ;
                       
net.layers{end+1} = struct('type', 'dropout', ...
                           'rate', 0.25) ;
% Block 2
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.05*randn(5,5,32,64, 'single'), []}}, ...
                           'learningRate', lr, ...
                           'stride', [1 1], ...
                           'pad', 2) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                            'weights', {{ones(64, 1, 'single'), zeros(64, 1, 'single')}}, ...
                            'learningRate', [1 1 0.5], ...
                            'weightDecay', [0 0]) ;                       
net.layers{end+1} = struct('type', 'relu') ;


net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                         'pool', [2 2], ...
                           'stride', [2 2], ...
                           'pad', 0) ;
                       
net.layers{end+1} = struct('type', 'dropout', ...
                           'rate', 0.25) ;

% Block 3
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.05*randn(3,3,64,64, 'single'), []}}, ...
                           'learningRate', lr, ...
                           'stride', [1 1], ...
                           'pad', 1) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                            'weights', {{ones(64, 1, 'single'), zeros(64, 1, 'single')}}, ...
                            'learningRate', [1 1 0.5], ...
                            'weightDecay', [0 0]) ;                       
net.layers{end+1} = struct('type', 'relu') ;

net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', [2 2], ...
                           'pad', 0) ;
                       
net.layers{end+1} = struct('type', 'dropout', ...
                           'rate', 0.25) ;

% Block 4 Fully connected
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.05*randn(4,4,64,512, 'single'), []}}, ...
                           'learningRate', 0.1*lr, ...
                           'stride', 1, ...
                           'pad', 0) ;
                       
net.layers{end+1} = struct('type', 'relu') ;

net.layers{end+1} = struct('type', 'dropout', ...
                           'rate', 0.3) ;
                       
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.05*randn(1,1,512,512, 'single'), []}}, ...
                           'learningRate', 0.1*lr, ...
                           'stride', 1, ...
                           'pad', 0) ;
                       
net.layers{end+1} = struct('type', 'relu') ;

net.layers{end+1} = struct('type', 'dropout', ...
                           'rate', 0) ;  
                       
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{0.05*randn(1,1,512,output_nodes, 'single'), []}}, ...
                           'learningRate', 0.1*lr, ...
                           'stride', 1, ...
                           'pad', 0) ;
% Loss layer
net.layers{end+1} = struct('type', 'softmaxloss') ;

% Meta parameters
net.meta.inputSize = [32 32 3] ;


% Fill in default values
net = vl_simplenn_tidy(net) ;


end